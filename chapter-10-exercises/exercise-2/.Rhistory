print(birthdays)
?sc
??sc
undebug(logit)
debugonce()
debugonce(birthdays)
print(birthdays)
?debug
debugonce(get_next_birthdays)
hello
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- change_year(birthdate,2020)
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
date_as_string <- as.character(birthdays)
date_as_string
date_as_string <- lapply(birthdays,as.character)
date_as_string
date_as_string <- lappply(birthdays,change_year(birthdays,2020))
date_as_string <- lapply(birthdays,change_year(birthdays,2020))
date_as_string <- lapply(birthdays,change_year,2020)
date_as_string
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- lapply(birthdate,change_year,2020))
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- lapply(birthdate,change_year,2020))
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- lapply(birthdate,change_year,2020))
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- lapply(birthdate,change_year,2020)
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
#11
get_next_birthdays(birthdays)
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- change_year(birthdate,2020)
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
#11
get_next_birthdays(birthdays[[claire_bday]])
#9
birthdays <- list(claire_bday = as.Date("1999-07-05"),mom_bday = as.Date("1973-11-01"),dad_bday = as.Date("1968-07-24"))
#11
get_next_birthdays(birthdays[[claire_bday]])
View(birthdays)
#11
get_next_birthdays(birthdays[["claire_bday"]])
#12
next_birthdays <- lapply(birthdays,get_next_birthdays,2020)
#12
next_birthdays <- lapply(birthdays,get_next_birthdays)
print(next_birthdays)
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
pass_date <- current_date - input_date > 0
if (ignore_year) {
input_date <- change_year(date,2020)
}
return(pass_date)
}
date_has_passed("2025-01-21",TRUE)
input_date <- as.numeric(change_year(date,2020))
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
pass_date <- current_date - input_date > 0
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
return(pass_date)
}
date_has_passed("2025-01-21",TRUE)
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
pass_date <- current_date - input_date > 0
return(pass_date)
}
date_has_passed("2025-01-21",TRUE)
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
print(input_date)
}
pass_date <- current_date - input_date > 0
return(pass_date)
}
date_has_passed("2025-01-21",TRUE)
date_has_passed("2025-01-21")
#8
print(date_has_passed(as.Date("2025-03-21")))
print(date_has_passed(as.Date("2025-01-20"),TRUE))
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
pass_date <- current_date - input_date > 0
return(pass_date)
}
print(date_has_passed(as.Date("2025-01-20"),TRUE))
print(date_has_passed(as.Date("2025-01-22"),TRUE))
#8
print(date_has_passed(as.Date("2025-03-21")))
#9
birthdays <- list(claire_bday = as.Date("1999-01-05"),mom_bday = as.Date("1973-11-01"),dad_bday = as.Date("1968-07-24"))
#12
next_birthdays <- lapply(birthdays,get_next_birthdays)
print(next_birthdays)
#9
birthdays <- list(claire_bday = as.Date("1999-07-05"),mom_bday = as.Date("1973-11-01"),dad_bday = as.Date("1968-07-24"))
#12
next_birthdays <- lapply(birthdays,get_next_birthdays)
print(next_birthdays)
print(next_birthdays)
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
pass_date <- current_date - input_date >= 0
return(pass_date)
}
print(date_has_passed(as.Date("2025-01-22"),TRUE))
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
pass_date <- current_date - input_date > 0
return(pass_date)
}
print(date_has_passed(as.Date("2025-01-22"),TRUE))
#8
#install.packages("stringr")
library(stringr)
#################
#### PART 1 #####
#################
#1
my_age <- 21
#2
my_name <- "Claire Yuan"
#3
make_introduction <- function(name,age) {
introduction <- paste("hello, my name is", name, "and I'm", age, "years old.")
introduction
}
#4
my_intro <- make_introduction(my_name, my_age)
#5
casual_intro <- sub("hello, my name is", "Hey, I'm", my_intro)
#6
capital_intro <- str_to_title(my_intro,locale = '')
print(capital_intro)
#7
intro_e_count <- str_count(my_intro,'e')
#################
#### PART 2 #####
#################
#1
books <- c("harry potter","Sapien: A brief history of humankind", "everything I never told you",
"bird box","The boy in the striped pajamas","Jane Eyre" )
print(books)
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <-paste(books, "is a great read!")
print(book_reviews)
#4
remove_book <- function(book_titles, index) {
remove_index_book <- book_titles[-index]
remove_index_book
}
#5
books_without_five <- remove_book(books,5)
print(books_without_five)
#6
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
#1
numbers <- seq(1:201)
#2
squared_numbers <- numbers ^ 2
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
#1
spring_break <- as.Date("March 21 2020", "%b%d%Y")
#2
class(spring_break)
#3
today <- Sys.Date()
#4
days_to_break <- difftime(spring_break,today)
print(days_to_break)
#5
change_year <- function(date,year) {
date_as_string <-as.character(date)
month_day <- substr(date_as_string,5,nchar(date_as_string))
new_date <- paste(year,month_day,sep="")
new_date <- as.Date(new_date)
return(new_date)
}
#6
spring_break_2025 <- change_year(spring_break,2025)
class(spring_break_2025)
#7
date_has_passed <- function(date,ignore_year = FALSE) {
input_date <- as.numeric(date)
current_date <- as.numeric(Sys.Date())
if (ignore_year) {
input_date <- as.numeric(change_year(date,2020))
}
pass_date <- current_date - input_date > 0
return(pass_date)
}
print(date_has_passed(as.Date("2025-01-22"),TRUE))
#8
print(date_has_passed(as.Date("2025-03-21")))
#9
birthdays <- list(claire_bday = as.Date("1999-07-05"),mom_bday = as.Date("1973-11-01"),dad_bday = as.Date("1968-07-24"))
print(birthdays)
#10
get_next_birthdays <- function(birthdate) {
current_year_birthdate <- change_year(birthdate,2020)
passed_current_birthdate <- date_has_passed(current_year_birthdate)
if (passed_current_birthdate) {
current_year_birthdate <- change_year(birthdate,2021)
}
return(current_year_birthdate)
}
#11
get_next_birthdays(birthdays[["claire_bday"]])
#12
next_birthdays <- lapply(birthdays,get_next_birthdays)
print(next_birthdays)
#install.packages("stringr")
install.packages("styler")
install.packages("lintr")
library(styler)
library(lintr)
#9
birthdays <- list(claire_bday = as.Date("1999-07-05"),mom_bday = as.Date("1973-11-01"),
dad_bday = as.Date("1968-07-24"))
as.Date("2015-03-21")
type(as.Date("2015-03-21"))
class(as.Date("2015-03-21"))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
Employee <- paste(c("Employee"),seq(1:100))
print(Employee)
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- c(runif(100,40000,50000))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
Employee <- paste(c("Employee"),1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- c(runif(100,40000,50000))
rm(salaries)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- c(runif(100,-5000,10000))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100,40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salariers <- data.frame(employees,salaries_2017,salary_adjustments,stringsaAsFactor=FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(c("Employee"),1:100)
rm(Employee)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaries_adjustments <- runif(100,-5000,10000)
rm(salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salariers <- data.frame(employees,salaries_2017,salaries_adjustments,stringsaAsFactor=FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringsaAsFactor=FALSE)
rm(salariers)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
saleries$salaries_2018 <- salaries_2017 + salaries_adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + salaries_adjustments
print(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringsaAsFactors=FALSE)
print(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + salaries_adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_2018 > 0
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_adjustments > 0
print(salaries)
# What was the 2018 salary of Employee 57
salaries["Emplyee 57","salaries_2018"]
# What was the 2018 salary of Employee 57
salaries["Employee 57","salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57","salaries_2018"]
# How many employees got a raise?
nrows[salaries$salaries_adjustments >0]
# How many employees got a raise?
nrow[salaries$salaries_adjustments >0]
# How many employees got a raise?
nrow[salaries$raise]
# How many employees got a raise?
nrow(salaries$raise)
# How many employees got a raise?
ncol(salaries$raise)
?ncol
# How many employees got a raise?
ncol(salaries$raise == TRUE)
# How many employees got a raise?
ncol(salaries[,salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[,salaries$raise == TRUE])
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max()]
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments)]
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),"salaries_adjustments"]
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),]
# What was the dollar value of the highest raise?
highest_raise <- salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),]
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),"employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"salaries_adjustments"]
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringAsFactors=FALSE)
# What was the largest decrease in salaries between the two years?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"salaries_adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),"employees"]
View(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringAsFactors = FALSE)
View(salaries)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringsAsFactors = FALSE)
View(salaries)
# What was the largest decrease in salaries between the two years?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"salaries_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"employees"]
# What was the average salary change?
mean(salaries$salaries_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE,])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE,"salaries_adjustments"])
salaries[salaries$raise == FALSE,"salaries_adjustments"]
salaries[salaries$raise == FALSE]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"employees"]
salaries[salaries$raise == FALSE]
salaries[salaries$raise == FALSE,]
salaries[,salaries$raise == FALSE]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(c("Employee"),1:100)
rm(Employee)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100,40000,50000)
rm(salaries)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaries_adjustments <- runif(100,-5000,10000)
rm(salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjustments,stringsAsFactors = FALSE)
View(salaries)
rm(salariers)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries_2017 + salaries_adjustments
print(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raise <- salaries$salaries_adjustments > 0
print(salaries)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57","salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$raise == TRUE,])
# What was the dollar value of the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salaries_adjustments == max(salaries$salaries_adjustments),"employees"]
# What was the largest decrease in salaries between the two years?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"salaries_adjustments"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salaries_adjustments == min(salaries$salaries_adjustments),"employees"]
# What was the average salary change?
mean(salaries$salaries_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE,"salaries_adjustments"])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE,"salaries_adjustments"])
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[salaries$raise == FALSE,])
mean(salaries[salaries$raise == FALSE,]$salaries_adjustments)
# Write a .csv file of your salary data to your working directory
getwd()
setwd("C:/Users/yuany/Desktop/book-exercises/chapter-10-exercises/exercise-2")
getwd()
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
getwd()
